{"ast":null,"code":"'use strict';\n\nvar StringReader = require('./stringReader');\n\nvar utils = require('./utils');\n\nvar CompressedObject = require('./compressedObject');\n\nvar jszipProto = require('./object'); // class ZipEntry {{{\n\n/**\n * An entry in the zip file.\n * @constructor\n * @param {Object} options Options of the current file.\n * @param {Object} loadOptions Options for loading the stream.\n */\n\n\nfunction ZipEntry(options, loadOptions) {\n  this.options = options;\n  this.loadOptions = loadOptions;\n}\n\nZipEntry.prototype = {\n  /**\n   * say if the file is encrypted.\n   * @return {boolean} true if the file is encrypted, false otherwise.\n   */\n  isEncrypted: function () {\n    // bit 1 is set\n    return (this.bitFlag & 0x0001) === 0x0001;\n  },\n\n  /**\n   * say if the file has utf-8 filename/comment.\n   * @return {boolean} true if the filename/comment is in utf-8, false otherwise.\n   */\n  useUTF8: function () {\n    // bit 11 is set\n    return (this.bitFlag & 0x0800) === 0x0800;\n  },\n\n  /**\n   * Prepare the function used to generate the compressed content from this ZipFile.\n   * @param {DataReader} reader the reader to use.\n   * @param {number} from the offset from where we should read the data.\n   * @param {number} length the length of the data to read.\n   * @return {Function} the callback to get the compressed content (the type depends of the DataReader class).\n   */\n  prepareCompressedContent: function (reader, from, length) {\n    return function () {\n      var previousIndex = reader.index;\n      reader.setIndex(from);\n      var compressedFileData = reader.readData(length);\n      reader.setIndex(previousIndex);\n      return compressedFileData;\n    };\n  },\n\n  /**\n   * Prepare the function used to generate the uncompressed content from this ZipFile.\n   * @param {DataReader} reader the reader to use.\n   * @param {number} from the offset from where we should read the data.\n   * @param {number} length the length of the data to read.\n   * @param {JSZip.compression} compression the compression used on this file.\n   * @param {number} uncompressedSize the uncompressed size to expect.\n   * @return {Function} the callback to get the uncompressed content (the type depends of the DataReader class).\n   */\n  prepareContent: function (reader, from, length, compression, uncompressedSize) {\n    return function () {\n      var compressedFileData = utils.transformTo(compression.uncompressInputType, this.getCompressedContent());\n      var uncompressedFileData = compression.uncompress(compressedFileData);\n\n      if (uncompressedFileData.length !== uncompressedSize) {\n        throw new Error(\"Bug : uncompressed data size mismatch\");\n      }\n\n      return uncompressedFileData;\n    };\n  },\n\n  /**\n   * Read the local part of a zip file and add the info in this object.\n   * @param {DataReader} reader the reader to use.\n   */\n  readLocalPart: function (reader) {\n    var compression, localExtraFieldsLength; // we already know everything from the central dir !\n    // If the central dir data are false, we are doomed.\n    // On the bright side, the local part is scary  : zip64, data descriptors, both, etc.\n    // The less data we get here, the more reliable this should be.\n    // Let's skip the whole header and dash to the data !\n\n    reader.skip(22); // in some zip created on windows, the filename stored in the central dir contains \\ instead of /.\n    // Strangely, the filename here is OK.\n    // I would love to treat these zip files as corrupted (see http://www.info-zip.org/FAQ.html#backslashes\n    // or APPNOTE#4.4.17.1, \"All slashes MUST be forward slashes '/'\") but there are a lot of bad zip generators...\n    // Search \"unzip mismatching \"local\" filename continuing with \"central\" filename version\" on\n    // the internet.\n    //\n    // I think I see the logic here : the central directory is used to display\n    // content and the local directory is used to extract the files. Mixing / and \\\n    // may be used to display \\ to windows users and use / when extracting the files.\n    // Unfortunately, this lead also to some issues : http://seclists.org/fulldisclosure/2009/Sep/394\n\n    this.fileNameLength = reader.readInt(2);\n    localExtraFieldsLength = reader.readInt(2); // can't be sure this will be the same as the central dir\n\n    this.fileName = reader.readString(this.fileNameLength);\n    reader.skip(localExtraFieldsLength);\n\n    if (this.compressedSize == -1 || this.uncompressedSize == -1) {\n      throw new Error(\"Bug or corrupted zip : didn't get enough informations from the central directory \" + \"(compressedSize == -1 || uncompressedSize == -1)\");\n    }\n\n    compression = utils.findCompression(this.compressionMethod);\n\n    if (compression === null) {\n      // no compression found\n      throw new Error(\"Corrupted zip : compression \" + utils.pretty(this.compressionMethod) + \" unknown (inner file : \" + this.fileName + \")\");\n    }\n\n    this.decompressed = new CompressedObject();\n    this.decompressed.compressedSize = this.compressedSize;\n    this.decompressed.uncompressedSize = this.uncompressedSize;\n    this.decompressed.crc32 = this.crc32;\n    this.decompressed.compressionMethod = this.compressionMethod;\n    this.decompressed.getCompressedContent = this.prepareCompressedContent(reader, reader.index, this.compressedSize, compression);\n    this.decompressed.getContent = this.prepareContent(reader, reader.index, this.compressedSize, compression, this.uncompressedSize); // we need to compute the crc32...\n\n    if (this.loadOptions.checkCRC32) {\n      this.decompressed = utils.transformTo(\"string\", this.decompressed.getContent());\n\n      if (jszipProto.crc32(this.decompressed) !== this.crc32) {\n        throw new Error(\"Corrupted zip : CRC32 mismatch\");\n      }\n    }\n  },\n\n  /**\n   * Read the central part of a zip file and add the info in this object.\n   * @param {DataReader} reader the reader to use.\n   */\n  readCentralPart: function (reader) {\n    this.versionMadeBy = reader.readString(2);\n    this.versionNeeded = reader.readInt(2);\n    this.bitFlag = reader.readInt(2);\n    this.compressionMethod = reader.readString(2);\n    this.date = reader.readDate();\n    this.crc32 = reader.readInt(4);\n    this.compressedSize = reader.readInt(4);\n    this.uncompressedSize = reader.readInt(4);\n    this.fileNameLength = reader.readInt(2);\n    this.extraFieldsLength = reader.readInt(2);\n    this.fileCommentLength = reader.readInt(2);\n    this.diskNumberStart = reader.readInt(2);\n    this.internalFileAttributes = reader.readInt(2);\n    this.externalFileAttributes = reader.readInt(4);\n    this.localHeaderOffset = reader.readInt(4);\n\n    if (this.isEncrypted()) {\n      throw new Error(\"Encrypted zip are not supported\");\n    }\n\n    this.fileName = reader.readString(this.fileNameLength);\n    this.readExtraFields(reader);\n    this.parseZIP64ExtraField(reader);\n    this.fileComment = reader.readString(this.fileCommentLength); // warning, this is true only for zip with madeBy == DOS (plateform dependent feature)\n\n    this.dir = this.externalFileAttributes & 0x00000010 ? true : false;\n  },\n\n  /**\n   * Parse the ZIP64 extra field and merge the info in the current ZipEntry.\n   * @param {DataReader} reader the reader to use.\n   */\n  parseZIP64ExtraField: function (reader) {\n    if (!this.extraFields[0x0001]) {\n      return;\n    } // should be something, preparing the extra reader\n\n\n    var extraReader = new StringReader(this.extraFields[0x0001].value); // I really hope that these 64bits integer can fit in 32 bits integer, because js\n    // won't let us have more.\n\n    if (this.uncompressedSize === utils.MAX_VALUE_32BITS) {\n      this.uncompressedSize = extraReader.readInt(8);\n    }\n\n    if (this.compressedSize === utils.MAX_VALUE_32BITS) {\n      this.compressedSize = extraReader.readInt(8);\n    }\n\n    if (this.localHeaderOffset === utils.MAX_VALUE_32BITS) {\n      this.localHeaderOffset = extraReader.readInt(8);\n    }\n\n    if (this.diskNumberStart === utils.MAX_VALUE_32BITS) {\n      this.diskNumberStart = extraReader.readInt(4);\n    }\n  },\n\n  /**\n   * Read the central part of a zip file and add the info in this object.\n   * @param {DataReader} reader the reader to use.\n   */\n  readExtraFields: function (reader) {\n    var start = reader.index,\n        extraFieldId,\n        extraFieldLength,\n        extraFieldValue;\n    this.extraFields = this.extraFields || {};\n\n    while (reader.index < start + this.extraFieldsLength) {\n      extraFieldId = reader.readInt(2);\n      extraFieldLength = reader.readInt(2);\n      extraFieldValue = reader.readString(extraFieldLength);\n      this.extraFields[extraFieldId] = {\n        id: extraFieldId,\n        length: extraFieldLength,\n        value: extraFieldValue\n      };\n    }\n  },\n\n  /**\n   * Apply an UTF8 transformation if needed.\n   */\n  handleUTF8: function () {\n    if (this.useUTF8()) {\n      this.fileName = jszipProto.utf8decode(this.fileName);\n      this.fileComment = jszipProto.utf8decode(this.fileComment);\n    } else {\n      var upath = this.findExtraFieldUnicodePath();\n\n      if (upath !== null) {\n        this.fileName = upath;\n      }\n\n      var ucomment = this.findExtraFieldUnicodeComment();\n\n      if (ucomment !== null) {\n        this.fileComment = ucomment;\n      }\n    }\n  },\n\n  /**\n   * Find the unicode path declared in the extra field, if any.\n   * @return {String} the unicode path, null otherwise.\n   */\n  findExtraFieldUnicodePath: function () {\n    var upathField = this.extraFields[0x7075];\n\n    if (upathField) {\n      var extraReader = new StringReader(upathField.value); // wrong version\n\n      if (extraReader.readInt(1) !== 1) {\n        return null;\n      } // the crc of the filename changed, this field is out of date.\n\n\n      if (jszipProto.crc32(this.fileName) !== extraReader.readInt(4)) {\n        return null;\n      }\n\n      return jszipProto.utf8decode(extraReader.readString(upathField.length - 5));\n    }\n\n    return null;\n  },\n\n  /**\n   * Find the unicode comment declared in the extra field, if any.\n   * @return {String} the unicode comment, null otherwise.\n   */\n  findExtraFieldUnicodeComment: function () {\n    var ucommentField = this.extraFields[0x6375];\n\n    if (ucommentField) {\n      var extraReader = new StringReader(ucommentField.value); // wrong version\n\n      if (extraReader.readInt(1) !== 1) {\n        return null;\n      } // the crc of the comment changed, this field is out of date.\n\n\n      if (jszipProto.crc32(this.fileComment) !== extraReader.readInt(4)) {\n        return null;\n      }\n\n      return jszipProto.utf8decode(extraReader.readString(ucommentField.length - 5));\n    }\n\n    return null;\n  }\n};\nmodule.exports = ZipEntry;","map":{"version":3,"names":["StringReader","require","utils","CompressedObject","jszipProto","ZipEntry","options","loadOptions","prototype","isEncrypted","bitFlag","useUTF8","prepareCompressedContent","reader","from","length","previousIndex","index","setIndex","compressedFileData","readData","prepareContent","compression","uncompressedSize","transformTo","uncompressInputType","getCompressedContent","uncompressedFileData","uncompress","Error","readLocalPart","localExtraFieldsLength","skip","fileNameLength","readInt","fileName","readString","compressedSize","findCompression","compressionMethod","pretty","decompressed","crc32","getContent","checkCRC32","readCentralPart","versionMadeBy","versionNeeded","date","readDate","extraFieldsLength","fileCommentLength","diskNumberStart","internalFileAttributes","externalFileAttributes","localHeaderOffset","readExtraFields","parseZIP64ExtraField","fileComment","dir","extraFields","extraReader","value","MAX_VALUE_32BITS","start","extraFieldId","extraFieldLength","extraFieldValue","id","handleUTF8","utf8decode","upath","findExtraFieldUnicodePath","ucomment","findExtraFieldUnicodeComment","upathField","ucommentField","module","exports"],"sources":["/Users/contactaisoft/Documents/GitHub/REACT_LANGUAGE/tcsmgmt/node_modules/jszip/lib/zipEntry.js"],"sourcesContent":["'use strict';\nvar StringReader = require('./stringReader');\nvar utils = require('./utils');\nvar CompressedObject = require('./compressedObject');\nvar jszipProto = require('./object');\n// class ZipEntry {{{\n/**\n * An entry in the zip file.\n * @constructor\n * @param {Object} options Options of the current file.\n * @param {Object} loadOptions Options for loading the stream.\n */\nfunction ZipEntry(options, loadOptions) {\n    this.options = options;\n    this.loadOptions = loadOptions;\n}\nZipEntry.prototype = {\n    /**\n     * say if the file is encrypted.\n     * @return {boolean} true if the file is encrypted, false otherwise.\n     */\n    isEncrypted: function() {\n        // bit 1 is set\n        return (this.bitFlag & 0x0001) === 0x0001;\n    },\n    /**\n     * say if the file has utf-8 filename/comment.\n     * @return {boolean} true if the filename/comment is in utf-8, false otherwise.\n     */\n    useUTF8: function() {\n        // bit 11 is set\n        return (this.bitFlag & 0x0800) === 0x0800;\n    },\n    /**\n     * Prepare the function used to generate the compressed content from this ZipFile.\n     * @param {DataReader} reader the reader to use.\n     * @param {number} from the offset from where we should read the data.\n     * @param {number} length the length of the data to read.\n     * @return {Function} the callback to get the compressed content (the type depends of the DataReader class).\n     */\n    prepareCompressedContent: function(reader, from, length) {\n        return function() {\n            var previousIndex = reader.index;\n            reader.setIndex(from);\n            var compressedFileData = reader.readData(length);\n            reader.setIndex(previousIndex);\n\n            return compressedFileData;\n        };\n    },\n    /**\n     * Prepare the function used to generate the uncompressed content from this ZipFile.\n     * @param {DataReader} reader the reader to use.\n     * @param {number} from the offset from where we should read the data.\n     * @param {number} length the length of the data to read.\n     * @param {JSZip.compression} compression the compression used on this file.\n     * @param {number} uncompressedSize the uncompressed size to expect.\n     * @return {Function} the callback to get the uncompressed content (the type depends of the DataReader class).\n     */\n    prepareContent: function(reader, from, length, compression, uncompressedSize) {\n        return function() {\n\n            var compressedFileData = utils.transformTo(compression.uncompressInputType, this.getCompressedContent());\n            var uncompressedFileData = compression.uncompress(compressedFileData);\n\n            if (uncompressedFileData.length !== uncompressedSize) {\n                throw new Error(\"Bug : uncompressed data size mismatch\");\n            }\n\n            return uncompressedFileData;\n        };\n    },\n    /**\n     * Read the local part of a zip file and add the info in this object.\n     * @param {DataReader} reader the reader to use.\n     */\n    readLocalPart: function(reader) {\n        var compression, localExtraFieldsLength;\n\n        // we already know everything from the central dir !\n        // If the central dir data are false, we are doomed.\n        // On the bright side, the local part is scary  : zip64, data descriptors, both, etc.\n        // The less data we get here, the more reliable this should be.\n        // Let's skip the whole header and dash to the data !\n        reader.skip(22);\n        // in some zip created on windows, the filename stored in the central dir contains \\ instead of /.\n        // Strangely, the filename here is OK.\n        // I would love to treat these zip files as corrupted (see http://www.info-zip.org/FAQ.html#backslashes\n        // or APPNOTE#4.4.17.1, \"All slashes MUST be forward slashes '/'\") but there are a lot of bad zip generators...\n        // Search \"unzip mismatching \"local\" filename continuing with \"central\" filename version\" on\n        // the internet.\n        //\n        // I think I see the logic here : the central directory is used to display\n        // content and the local directory is used to extract the files. Mixing / and \\\n        // may be used to display \\ to windows users and use / when extracting the files.\n        // Unfortunately, this lead also to some issues : http://seclists.org/fulldisclosure/2009/Sep/394\n        this.fileNameLength = reader.readInt(2);\n        localExtraFieldsLength = reader.readInt(2); // can't be sure this will be the same as the central dir\n        this.fileName = reader.readString(this.fileNameLength);\n        reader.skip(localExtraFieldsLength);\n\n        if (this.compressedSize == -1 || this.uncompressedSize == -1) {\n            throw new Error(\"Bug or corrupted zip : didn't get enough informations from the central directory \" + \"(compressedSize == -1 || uncompressedSize == -1)\");\n        }\n\n        compression = utils.findCompression(this.compressionMethod);\n        if (compression === null) { // no compression found\n            throw new Error(\"Corrupted zip : compression \" + utils.pretty(this.compressionMethod) + \" unknown (inner file : \" + this.fileName + \")\");\n        }\n        this.decompressed = new CompressedObject();\n        this.decompressed.compressedSize = this.compressedSize;\n        this.decompressed.uncompressedSize = this.uncompressedSize;\n        this.decompressed.crc32 = this.crc32;\n        this.decompressed.compressionMethod = this.compressionMethod;\n        this.decompressed.getCompressedContent = this.prepareCompressedContent(reader, reader.index, this.compressedSize, compression);\n        this.decompressed.getContent = this.prepareContent(reader, reader.index, this.compressedSize, compression, this.uncompressedSize);\n\n        // we need to compute the crc32...\n        if (this.loadOptions.checkCRC32) {\n            this.decompressed = utils.transformTo(\"string\", this.decompressed.getContent());\n            if (jszipProto.crc32(this.decompressed) !== this.crc32) {\n                throw new Error(\"Corrupted zip : CRC32 mismatch\");\n            }\n        }\n    },\n\n    /**\n     * Read the central part of a zip file and add the info in this object.\n     * @param {DataReader} reader the reader to use.\n     */\n    readCentralPart: function(reader) {\n        this.versionMadeBy = reader.readString(2);\n        this.versionNeeded = reader.readInt(2);\n        this.bitFlag = reader.readInt(2);\n        this.compressionMethod = reader.readString(2);\n        this.date = reader.readDate();\n        this.crc32 = reader.readInt(4);\n        this.compressedSize = reader.readInt(4);\n        this.uncompressedSize = reader.readInt(4);\n        this.fileNameLength = reader.readInt(2);\n        this.extraFieldsLength = reader.readInt(2);\n        this.fileCommentLength = reader.readInt(2);\n        this.diskNumberStart = reader.readInt(2);\n        this.internalFileAttributes = reader.readInt(2);\n        this.externalFileAttributes = reader.readInt(4);\n        this.localHeaderOffset = reader.readInt(4);\n\n        if (this.isEncrypted()) {\n            throw new Error(\"Encrypted zip are not supported\");\n        }\n\n        this.fileName = reader.readString(this.fileNameLength);\n        this.readExtraFields(reader);\n        this.parseZIP64ExtraField(reader);\n        this.fileComment = reader.readString(this.fileCommentLength);\n\n        // warning, this is true only for zip with madeBy == DOS (plateform dependent feature)\n        this.dir = this.externalFileAttributes & 0x00000010 ? true : false;\n    },\n    /**\n     * Parse the ZIP64 extra field and merge the info in the current ZipEntry.\n     * @param {DataReader} reader the reader to use.\n     */\n    parseZIP64ExtraField: function(reader) {\n\n        if (!this.extraFields[0x0001]) {\n            return;\n        }\n\n        // should be something, preparing the extra reader\n        var extraReader = new StringReader(this.extraFields[0x0001].value);\n\n        // I really hope that these 64bits integer can fit in 32 bits integer, because js\n        // won't let us have more.\n        if (this.uncompressedSize === utils.MAX_VALUE_32BITS) {\n            this.uncompressedSize = extraReader.readInt(8);\n        }\n        if (this.compressedSize === utils.MAX_VALUE_32BITS) {\n            this.compressedSize = extraReader.readInt(8);\n        }\n        if (this.localHeaderOffset === utils.MAX_VALUE_32BITS) {\n            this.localHeaderOffset = extraReader.readInt(8);\n        }\n        if (this.diskNumberStart === utils.MAX_VALUE_32BITS) {\n            this.diskNumberStart = extraReader.readInt(4);\n        }\n    },\n    /**\n     * Read the central part of a zip file and add the info in this object.\n     * @param {DataReader} reader the reader to use.\n     */\n    readExtraFields: function(reader) {\n        var start = reader.index,\n            extraFieldId,\n            extraFieldLength,\n            extraFieldValue;\n\n        this.extraFields = this.extraFields || {};\n\n        while (reader.index < start + this.extraFieldsLength) {\n            extraFieldId = reader.readInt(2);\n            extraFieldLength = reader.readInt(2);\n            extraFieldValue = reader.readString(extraFieldLength);\n\n            this.extraFields[extraFieldId] = {\n                id: extraFieldId,\n                length: extraFieldLength,\n                value: extraFieldValue\n            };\n        }\n    },\n    /**\n     * Apply an UTF8 transformation if needed.\n     */\n    handleUTF8: function() {\n        if (this.useUTF8()) {\n            this.fileName = jszipProto.utf8decode(this.fileName);\n            this.fileComment = jszipProto.utf8decode(this.fileComment);\n        } else {\n            var upath = this.findExtraFieldUnicodePath();\n            if (upath !== null) {\n                this.fileName = upath;\n            }\n            var ucomment = this.findExtraFieldUnicodeComment();\n            if (ucomment !== null) {\n                this.fileComment = ucomment;\n            }\n        }\n    },\n\n    /**\n     * Find the unicode path declared in the extra field, if any.\n     * @return {String} the unicode path, null otherwise.\n     */\n    findExtraFieldUnicodePath: function() {\n        var upathField = this.extraFields[0x7075];\n        if (upathField) {\n            var extraReader = new StringReader(upathField.value);\n\n            // wrong version\n            if (extraReader.readInt(1) !== 1) {\n                return null;\n            }\n\n            // the crc of the filename changed, this field is out of date.\n            if (jszipProto.crc32(this.fileName) !== extraReader.readInt(4)) {\n                return null;\n            }\n\n            return jszipProto.utf8decode(extraReader.readString(upathField.length - 5));\n        }\n        return null;\n    },\n\n    /**\n     * Find the unicode comment declared in the extra field, if any.\n     * @return {String} the unicode comment, null otherwise.\n     */\n    findExtraFieldUnicodeComment: function() {\n        var ucommentField = this.extraFields[0x6375];\n        if (ucommentField) {\n            var extraReader = new StringReader(ucommentField.value);\n\n            // wrong version\n            if (extraReader.readInt(1) !== 1) {\n                return null;\n            }\n\n            // the crc of the comment changed, this field is out of date.\n            if (jszipProto.crc32(this.fileComment) !== extraReader.readInt(4)) {\n                return null;\n            }\n\n            return jszipProto.utf8decode(extraReader.readString(ucommentField.length - 5));\n        }\n        return null;\n    }\n};\nmodule.exports = ZipEntry;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}